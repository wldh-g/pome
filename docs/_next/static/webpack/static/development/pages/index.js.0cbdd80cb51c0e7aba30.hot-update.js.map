{"version":3,"file":"static/webpack/static/development/pages/index.js.0cbdd80cb51c0e7aba30.hot-update.js","sources":["webpack:///./components/MenuMain/Footer/CaptureMenu.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  ActionButton, Dialog, DialogType, DialogFooter, PrimaryButton,\n  Spinner, SpinnerSize,\n} from 'office-ui-fabric-react';\nimport download from 'downloadjs';\nimport moment from 'moment';\nimport useI18n from '../../I18n';\nimport useTheme from '../../Theme';\n\nimport $ from './style.scss';\nimport D from './en.d.yml';\n\n/* eslint-disable no-console */\nconst CaptureMenu: React.SFC = () => {\n  const { t } = useI18n(D);\n  const {\n    setTheme, lockTheme, unlockTheme, getTheme,\n  } = useTheme();\n  const [hideDialog, setHideDialog] = useState(true);\n  const [isCapturing, setIsCapturing] = useState(false);\n\n  /* Screen Capture */\n  // Failed Dialog Hide\n  const closeDialog = () => {\n    setHideDialog(true);\n    setIsCapturing(false);\n  };\n  // Capture Function\n  const captureMenu = () => {\n    setIsCapturing(true);\n    if (document && window) {\n      const prevTheme = getTheme();\n      import('html2canvas').then((h2c) => {\n        setTheme('light');\n        lockTheme();\n        h2c.default(document.querySelector('main'), {\n          backgroundColor: '#fefefe',\n        }).then((canvas) => {\n          const dateString = moment().format('YYYYMMDD');\n          const selectedMealButton: HTMLButtonElement = document.querySelector(\n            '.ms-Pivot-link[aria-selected=\"true\"]',\n          );\n          const selectedMealType = selectedMealButton.dataset.content;\n          download(\n            canvas.toDataURL('image/png'),\n            `${t('교내식단')}-${dateString}-${selectedMealType}.png`,\n            'image/png',\n          );\n          setIsCapturing(false);\n          setTheme(prevTheme);\n          unlockTheme();\n        }).catch((err) => {\n          setHideDialog(false);\n          setTheme(prevTheme);\n          unlockTheme();\n          console.error(err);\n        });\n      }).catch((err) => {\n        setHideDialog(false);\n        setTheme(prevTheme);\n        unlockTheme();\n        console.error(err);\n      });\n    } else {\n      setHideDialog(false);\n    }\n  };\n\n  return (\n    <>\n      <ActionButton onClick={captureMenu} disabled={isCapturing}>\n        {t('메뉴 캡처')}\n        <Spinner\n          className={`${$.actionSpinner}${isCapturing ? ` ${$.activeSpinner}` : ''}`}\n          size={SpinnerSize.xSmall}\n        />\n      </ActionButton>\n      <Dialog\n        hidden={hideDialog}\n        dialogContentProps={{\n          type: DialogType.normal,\n          title: t('캡처 실패'),\n          subText: t('메뉴 DOM을 얻을 수 없었습니다. 잠시 후 다시 시도해보세요.'),\n          showCloseButton: false,\n        }}\n      >\n        <DialogFooter>\n          <PrimaryButton onClick={closeDialog} text={t('닫기')} />\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nexport default CaptureMenu;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAGA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;A","sourceRoot":""}