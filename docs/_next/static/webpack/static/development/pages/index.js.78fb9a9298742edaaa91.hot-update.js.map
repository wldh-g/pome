{"version":3,"file":"static/webpack/static/development/pages/index.js.78fb9a9298742edaaa91.hot-update.js","sources":["webpack:///./components/MenuList/index.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Pivot, PivotItem, ActionButton,\n} from 'office-ui-fabric-react';\nimport DoubleList from './DoubleList';\n\nimport $ from './style.scss';\n\ninterface MenuData {\n  processed?: boolean\n  breakfast: string[]\n  lunch: string[]\n  dinner: string[]\n}\n\nconst MenuList: React.SFC = () => {\n  // States\n  const initialJigokData: MenuData = {\n    breakfast: [], lunch: [], dinner: [], processed: false,\n  };\n  const [jigokData, setJigokData] = useState(initialJigokData);\n  const initialRistData: MenuData = {\n    breakfast: [], lunch: [], dinner: [], processed: false,\n  };\n  const [ristData, setRISTData] = useState(initialRistData);\n  const [dispModeTogglerText, setDispModeTogglerText] = useState('밝기 모드 변경');\n\n  // Fetch Menu Data\n  useEffect(() => {\n    const APIFailed: MenuData = {\n      breakfast: ['API 요청이 잘못되었습니다.'],\n      lunch: ['API 요청이 잘못되었습니다.'],\n      dinner: ['API 요청이 잘못되었습니다.'],\n      processed: true,\n    };\n    fetch('https://monet.haze.dog:8282/api/getJigokMenu', {\n      method: 'GET',\n    }).then((response) => {\n      if (response.status === 200) {\n        response.json().then((data: MenuData) => {\n          setJigokData({\n            ...data,\n            processed: true,\n          });\n        }).catch(() => {\n          setJigokData(APIFailed);\n        });\n      } else {\n        setJigokData(APIFailed);\n      }\n    }, () => { setJigokData(APIFailed); });\n    fetch('https://monet.haze.dog:8282/api/getRISTMenu', {\n      method: 'GET',\n    }).then((response) => {\n      if (response.status === 200) {\n        response.json().then((data: MenuData) => {\n          setRISTData({\n            ...data,\n            processed: true,\n          });\n        }).catch(() => {\n          setRISTData(APIFailed);\n        });\n      } else {\n        setRISTData(APIFailed);\n      }\n    }, () => { setRISTData(APIFailed); });\n  }, []);\n\n  // Set default pivot item by time\n  const hour = (new Date()).getHours();\n  let showWhat = 'breakfast';\n  if (hour >= 14) {\n    showWhat = 'dinner';\n  } else if (hour >= 10) {\n    showWhat = 'lunch';\n  }\n\n  // Set toggle mode change button\n  const toggleDispMode = () => {\n    if (document.documentElement.classList.contains('dark')) {\n      document.documentElement.classList.add('light');\n      document.documentElement.classList.remove('dark');\n      setDispModeTogglerText('어둡게 보기');\n    } else {\n      document.documentElement.classList.add('dark');\n      document.documentElement.classList.remove('light');\n      setDispModeTogglerText('밝게 보기');\n    }\n  };\n  useEffect(() => {\n    if (document.documentElement.classList.contains('dark')) {\n      setDispModeTogglerText('어둡게 보기');\n    } else {\n      setDispModeTogglerText('밝게 보기');\n    }\n  }, []);\n\n  return (\n    <div className={$.container}>\n      <main>\n        <h1>오늘의 교내 식단</h1>\n        <Pivot className={$.pivot} defaultSelectedKey={showWhat}>\n          <PivotItem headerText=\"아침\" itemKey=\"breakfast\">\n            <DoubleList jigokData={jigokData} ristData={ristData} type=\"breakfast\" />\n          </PivotItem>\n          <PivotItem headerText=\"점심\" itemKey=\"lunch\">\n            <DoubleList jigokData={jigokData} ristData={ristData} type=\"lunch\" />\n          </PivotItem>\n          <PivotItem headerText=\"저녁\" itemKey=\"dinner\">\n            <DoubleList jigokData={jigokData} ristData={ristData} type=\"dinner\" />\n          </PivotItem>\n        </Pivot>\n      </main>\n      <footer>\n        <div>\n        <ActionButton onClick={toggleDispMode}>{dispModeTogglerText}</ActionButton>\n        </div>\n        <p>\n          Haze Dog.\n          <br />\n          데이터: 포스텍 복지회, 신세계푸드\n        </p>\n      </footer>\n    </div>\n  );\n};\n\nexport default MenuList;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AAEA;AACA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAHA;AAAA;AAAA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAPA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAGA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;A","sourceRoot":""}