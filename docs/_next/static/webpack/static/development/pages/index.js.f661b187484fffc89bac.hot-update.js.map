{"version":3,"file":"static/webpack/static/development/pages/index.js.f661b187484fffc89bac.hot-update.js","sources":["webpack:///./components/API.tsx"],"sourcesContent":["import React, {\n  createContext, useReducer, useContext, Dispatch,\n} from 'react';\nimport { I18nLocale } from './I18n';\n\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\ninterface MealMultiMenu {\n  [mealName: string]: string[]\n};\ntype MealMenu = string[] | MealMultiMenu;\ntype MealByPlaceRaw = { [key in MealType]: string[] };\ntype MealByPlace = {\n  loaded: boolean\n  meals: { [key in MealType]?: MealMenu }\n};\nexport type MealPlaces = 'jigok' | 'rist';\ntype APIDataStruct = {\n  locale: I18nLocale\n  places: { [key in MealPlaces]: MealByPlace }\n};\n\nconst initialAPIContext: APIDataStruct = {\n  locale: 'ko',\n  places: {\n    jigok: { loaded: false, meals: {} },\n    rist: { loaded: false, meals: {} },\n  },\n};\nconst APIContext = createContext<APIDataStruct>(initialAPIContext);\n\ntype APIAction =\n  | { type: 'FETCH_JIGOK'; dispatch: APIDispatch; locale?: I18nLocale; }\n  | { type: 'FETCH_RIST'; dispatch: APIDispatch; locale?: I18nLocale; }\n  | { type: 'SET_LOCALE'; locale: I18nLocale; }\n  | { type: 'UPDATE_MENU'; place: MealPlaces; rawMenu: MealByPlaceRaw; };\nconst apiReducer = (state: APIDataStruct, action: APIAction): APIDataStruct => {\n  switch (action.type) {\n    case 'SET_LOCALE': {\n      return {\n        ...initialAPIContext,\n        locale: action.locale,\n      };\n    }\n    case 'FETCH_JIGOK': {\n      getJigokMenu(action.locale || state.locale, action.dispatch);\n      return state;\n    }\n    case 'FETCH_RIST': {\n      getRISTMenu(action.locale || state.locale, action.dispatch);\n      return state;\n    }\n    case 'UPDATE_MENU': {\n      const ustate = { ...state };\n      ustate.places[action.place].meals.breakfast = parallelizeMenu(\n        action.rawMenu.breakfast, state.locale,\n      );\n      ustate.places[action.place].meals.lunch = parallelizeMenu(\n        action.rawMenu.lunch, state.locale,\n      );\n      ustate.places[action.place].meals.dinner = parallelizeMenu(\n        action.rawMenu.dinner, state.locale,\n      );\n      ustate.places[action.place].loaded = true;\n      return ustate;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\ntype APIDispatch = Dispatch<APIAction>;\nconst APIDispatchContext = createContext<APIDispatch | undefined>(undefined);\n\ninterface Props { children: React.ReactElement | React.ReactElement[] }\nexport const APIEnabled: React.SFC<Props> = ({ children }: Props) => {\n  const [state, dispatch] = useReducer(apiReducer, initialAPIContext);\n  return (\n    <APIDispatchContext.Provider value={dispatch}>\n      <APIContext.Provider value={state}>\n        {children}\n      </APIContext.Provider>\n    </APIDispatchContext.Provider>\n  );\n};\n\nexport const useAPI = () => {\n  const state = useContext(APIContext);\n  const dispatch = useContext(APIDispatchContext);\n\n  // API Locale Setter\n  const setAPILocale = (locale: I18nLocale): void => {\n    dispatch({\n      type: 'SET_LOCALE',\n      locale,\n    });\n  };\n\n  // API Locale Getter\n  const getAPILocale = (): I18nLocale => state.locale;\n\n  // Menu Fetcher\n  const fetchMenu = (locale?: I18nLocale) => {\n    console.log(state.locale);\n    if (!state.places.jigok.loaded) {\n      dispatch({ type: 'FETCH_JIGOK', dispatch, locale });\n    }\n    if (!state.places.rist.loaded) {\n      dispatch({ type: 'FETCH_RIST', dispatch, locale });\n    }\n  };\n\n  // Menu Loaded Info Getter\n  const isMenuLoaded = (place: MealPlaces): boolean => state.places[place].loaded;\n\n  // Menu Getter\n  const getMenu = (place: MealPlaces, type: MealType): (MealMenu | null) => {\n    let menu = null;\n    if (state.places[place].loaded) {\n      menu = state.places[place].meals[type];\n    }\n    return menu;\n  };\n\n  return {\n    setAPILocale, getAPILocale, fetchMenu, getMenu, isMenuLoaded,\n  };\n};\n\nexport default useAPI;\n\n/* Real API Handlers */\n\ninterface APIResponse {\n  breakfast: string[]\n  lunch: string[]\n  dinner: string[]\n};\n\nconst ParseFailedMessage: {[key in I18nLocale]: string} = {\n  en: 'Failed to parse the API response.',\n  ko: 'API 응답을 해석할 수 없습니다.',\n};\n\nconst APIFailedMessage: {[key in I18nLocale]: string} = {\n  en: 'Invalid API request.',\n  ko: 'API 요청이 잘못되었습니다.',\n};\nconst APIFailedObject: {[key in I18nLocale]: {[key in MealType]: string[]}} = {\n  en: {\n    breakfast: [APIFailedMessage.en],\n    lunch: [APIFailedMessage.en],\n    dinner: [APIFailedMessage.en],\n  },\n  ko: {\n    breakfast: [APIFailedMessage.ko],\n    lunch: [APIFailedMessage.ko],\n    dinner: [APIFailedMessage.ko],\n  },\n};\n\nconst APIServer = 'https://monet.haze.dog:8282/api';\n\nconst parallelizeMenu = (menu: string[], locale: I18nLocale): MealMenu => {\n  let cache: MealMenu = [];\n  if (menu.length > 0) {\n    if (menu[0].indexOf('== ') === 0) {\n      cache = {};\n      let cacheKey = null;\n      for (let idx = 0; idx < menu.length; idx += 1) {\n        const item = menu[idx];\n        if (item.indexOf('== ') === 0) {\n          const key = item.substring(3);\n          cache[key] = [];\n          cacheKey = key;\n        } else if (cacheKey && cache[cacheKey]) {\n          cache[cacheKey].push(item);\n        } else {\n          cache = [ParseFailedMessage[locale]];\n          break;\n        }\n      }\n    } else {\n      cache = menu;\n    }\n  }\n  return cache;\n};\n\nconst getJigokMenu = (locale: I18nLocale, dispatch: APIDispatch) => {\n  const jigokFailed: APIAction = {\n    type: 'UPDATE_MENU', place: 'jigok', rawMenu: APIFailedObject[locale],\n  };\n  fetch(`${APIServer}/v1/getJigokMenu?locale=${locale}`, {\n    method: 'GET',\n  }).then((response) => {\n    if (response.status === 200) {\n      response.json().then((data: APIResponse) => {\n        dispatch({\n          type: 'UPDATE_MENU',\n          place: 'jigok',\n          rawMenu: data,\n        });\n      }).catch(() => {\n        dispatch(jigokFailed);\n      });\n    } else {\n      dispatch(jigokFailed);\n    }\n  }, () => { dispatch(jigokFailed); });\n};\n\nconst getRISTMenu = (locale: I18nLocale, dispatch: APIDispatch) => {\n  const ristFailed: APIAction = {\n    type: 'UPDATE_MENU', place: 'rist', rawMenu: APIFailedObject[locale],\n  };\n  fetch(`${APIServer}/v1/getRISTMenu?locale=${locale}`, {\n    method: 'GET',\n  }).then((response) => {\n    if (response.status === 200) {\n      response.json().then((data: APIResponse) => {\n        dispatch({\n          type: 'UPDATE_MENU',\n          place: 'rist',\n          rawMenu: data,\n        });\n      }).catch(() => {\n        dispatch(ristFailed);\n      });\n    } else {\n      dispatch(ristFailed);\n    }\n  }, () => { dispatch(ristFailed); });\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAQA;AAaA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAFA;AAOA;AACA;AAMA;AACA;AACA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AA/BA;AAiCA;AACA;AAEA;AAGA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAEA;AAEA;AACA;AAKA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AANA;AAaA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;A","sourceRoot":""}